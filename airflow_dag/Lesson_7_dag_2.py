from datetime import datetime, timedelta
import pandas as pd
from airflow.decorators import dag, task
from airflow.operators.python import get_current_context
import pandahouse as ph
import telegram
import matplotlib.pyplot as plt
import seaborn as sns
import io

# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º connection
connection = {'host': 'https://clickhouse.lab.karpov.courses',
                      'database':'simulator_20221120',
                      'user':'USER', 
                      'password':'PASSWORD'
                     }

# –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ç–µ–º—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
from matplotlib import style
sns.set_theme(({**style.library["fivethirtyeight"]}))
plt.rcParams["figure.figsize"] = (15,8)


# –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
my_token = 'my_token' 
bot = telegram.Bot(token=my_token) 

# –≤—Å—Ç–∞–≤–∏—Ç—å —á–∞—Ç id
chat_id = 'chat_id'

default_args = {
    'owner': 'd-merinov-24',
    'depends_on_past': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
    'start_date': datetime(2022, 12, 16)
    }

schedule_interval = '0 11 * * *'

@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False)
def lesson_7_dag_2_merinov():

    @task()
    def get_dau_df_2():

        """
        —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ DAU
        """

        query = '''
                    SELECT COUNT (DISTINCT user_id ) as uniq_users,
                    day, os, gender, age, source 
                    FROM (

                            SELECT user_id,
                              toStartOfDay(toDateTime(time)) AS  day, os, gender, age, source 
                            FROM simulator_20221120.feed_actions 
                            GROUP BY user_id, day,os, gender, age, source 
                            HAVING day > (today()-1) - 7 and day != today()

                            UNION ALL

                            SELECT user_id,
                              toStartOfDay(toDateTime(time)) AS  day, os, gender, age, source 
                            FROM simulator_20221120.message_actions 
                            GROUP BY user_id, day, os, gender, age, source 
                            HAVING day > (today()-1) - 7 and day != today()
                              )
                    GROUP BY day, os, gender, age, source 
                '''
        dau_df = ph.read_clickhouse(query=query, connection=connection)
        dau_df.day = dau_df.day.dt.date
        return dau_df

    @task()
    def get_dau_info(dau_df):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –º–µ—Ç—Ä–∏–∫–∞–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            dau_df: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """

        dau = dau_df.groupby('day', as_index=False).agg({'uniq_users':'sum'})
        dau['growth_rate'] = dau.uniq_users.pct_change()

        date = dau.day.max()
        dau_value = dau.query('day == @dau_df.day.max()').iloc[0][1]
        diff = round((dau.query('day == @dau_df.day.max()').iloc[0][2]*100), 2)

        if diff > 0:
            change = '–±–æ–ª—å—à–µ'
        else:
            change = '–º–µ–Ω—å—à–µ'

        title = 'üë•<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>'

        text_1 = f'–ó–∞ {date} DAU —Å–æ—Å—Ç–∞–≤–∏–ª {dau_value}, —á—Ç–æ –Ω–∞ {abs(diff)}% {change}, —á–µ–º –¥–Ω–µ–º —Ä–∞–Ω–µ–µ.'

        source = dau_df.groupby(['day', 'source'], as_index=False)\
                    .agg({'uniq_users':'sum'})\
                    .sort_values('day')
        source['ads_growth_rate'] = source.query('source == "ads"').uniq_users.pct_change()
        source['organic_growth_rate'] = source.query('source == "organic"').uniq_users.pct_change()

        ads_users = source.query('day == @dau_df.day.max() and source == "ads"').iloc[0][2]
        organic_users = source.query('day == @dau_df.day.max() and source == "organic"').iloc[0][2]

        ads_growth = round(source.query('day == @dau_df.day.max() and source == "ads"').iloc[0][3] * 100, 2)
        organic_growth = round(source.query('day == @dau_df.day.max() and source == "organic"').iloc[0][4] * 100, 2)

        text_2 = f'–ò—Ö –Ω–∏—Ö {ads_users} ({ads_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∫–ª–∞–º—ã –∏ {organic_users} ({organic_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é) —Å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞. '

        os = dau_df.groupby(['day', 'os'], as_index=False)\
                    .agg({'uniq_users':'sum'})\
                    .sort_values('day')
        os['androind_growth_rate'] = os.query('os == "Android"').uniq_users.pct_change()
        os['iOS_growth_rate'] = os.query('os == "iOS"').uniq_users.pct_change()

        android_users = os.query('day == @dau_df.day.max() and os == "Android"').iloc[0][2]
        ios_users = os.query('day == @dau_df.day.max() and os == "iOS"').iloc[0][2]

        android_growth = round(os.query('day == @dau_df.day.max() and os == "Android"').iloc[0][3] * 100, 2)
        ios_growth = round(os.query('day == @dau_df.day.max() and os == "iOS"').iloc[0][4] * 100, 2)

        text_3 = f'–õ–µ–Ω—Ç–æ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å {android_users} ({android_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Android –∏ {ios_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å iOS({ios_growth}%  –∫ –ø—Ä–µ–¥. –¥–Ω—é). '

        return title + '\n' + '\n' + text_1 + '\n' + text_2 + '\n' + text_3 + '\n'

    @task()
    def get_df_new_users():

        """
        —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """

        query = '''with mess as (Select    user_id,
                               min(toDate(time)) as bd,
                           os, gender, age, source
                            From simulator_20221120.message_actions 
                            Group by user_id, os, gender, age, source
                            having bd > (today()-1) - 7 and bd != today()),
                    feed as 
                                (Select    user_id,
                                           min(toDate(time)) as bd,
                                           os, gender, age, source
                                From simulator_20221120.feed_actions 
                                Group by user_id, os, gender, age, source
                                having bd > (today()-1) - 7 and bd != today())

            select count(distinct user_id) as users, bd, os,gender, age, source from feed l
            full Join mess r on l.user_id = r.user_id 
                        AND l.bd=r.bd 
                        AND l.os=r.os 
                        AND l.gender=r.gender 
                        AND l.age=r.age 
                        AND l.source = r.source
            group by bd, os,gender, age, source
            ORDER BY bd DESC'''
        df_new_users = ph.read_clickhouse(query=query, connection=connection)
        df_new_users.bd = df_new_users.bd.dt.date
        return df_new_users
    
    @task()
    def get_info_new_users(df_new_users):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            df_new_users: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """

        new_users = df_new_users.groupby('bd', as_index=False).agg({'users':'sum'})
        new_users['growth_rate'] = new_users.users.pct_change()

        date = new_users.bd.max()
        new_users_value = new_users.query('bd == @df_new_users.bd.max()').iloc[0][1]
        diff = round((new_users.query('bd == @df_new_users.bd.max()').iloc[0][2]*100), 2)

        if diff > 0:
            change = '–±–æ–ª—å—à–µ'
        else:
            change = '–º–µ–Ω—å—à–µ'

        title = "üÜï<b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>"

        text_1 = f'–ó–∞ –¥–µ–Ω—å –ø—Ä–∏—à–ª–æ {new_users_value} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ –Ω–∞ {abs(diff)}% {change}, —á–µ–º –¥–Ω–µ–º —Ä–∞–Ω–µ–µ.'

        source = df_new_users.groupby(['bd', 'source'], as_index=False)\
                    .agg({'users':'sum'})\
                    .sort_values('bd')

        source['ads_growth_rate'] = source.query('source == "ads"').users.pct_change()
        source['organic_growth_rate'] = source.query('source == "organic"').users.pct_change()

        ads_users = source.query('bd == @df_new_users.bd.max() and source == "ads"').iloc[0][2]
        organic_users = source.query('bd == @df_new_users.bd.max() and source == "organic"').iloc[0][2]

        ads_growth = round(source.query('bd == @df_new_users.bd.max() and source == "ads"').iloc[0][3] * 100, 2)
        organic_growth = round(source.query('bd == @df_new_users.bd.max() and source == "organic"').iloc[0][4] * 100, 2)

        text_2 = f'–ò—Ö –Ω–∏—Ö {ads_users} ({ads_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∫–ª–∞–º—ã –∏ {organic_users} ({organic_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é) —Å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞. '

        df_new_users['age_cut'] = pd.cut(df_new_users.age, [0, 15, 21, 27, 35, 45, 60, 70, 150])

        male = df_new_users.groupby(['gender', 'bd'])['users'].sum()\
                        .to_frame().reset_index()\
                        .query('bd == @df_new_users.bd.max() and gender == 1')\
                        .iloc[0][2]
        female = df_new_users.groupby(['gender', 'bd'])['users'].sum()\
                        .to_frame().reset_index()\
                        .query('bd == @df_new_users.bd.max() and gender == 0')\
                        .iloc[0][2]

        age = df_new_users.groupby(['age_cut', 'bd'])['users'].sum()\
                        .to_frame().reset_index()\
                        .sort_values(['bd', 'users'], ascending=False)\
                        .iloc[0][0]
        male_share = round(male/(female+male)*100)
        female_share = round(female/(female+male)*100)

        text_3 = f'–°—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º—É–∂—á–∏–Ω - {male} ({male_share}%) —á–µ–ª–æ–≤–µ–∫, –¥–µ–≤—É—à–µ–∫ - {female} ({female_share}%) —á–µ–ª–æ–≤–µ–∫.  –ù–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ {age}'


        return title+ '\n' + '\n' + text_1 + '\n' + text_2 + '\n' + text_3
    
    @task()
    def get_likes_views_df():
            
            """
            —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ª–∞–π–∫–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
            """
            query = '''SELECT toStartOfDay(toDateTime(time)) AS day,
                           count(user_id) as actions,
                           action 
                      FROM simulator_20221120.feed_actions
                      WHERE day > (today()-1) - 7 and day != today()
                      GROUP BY toStartOfDay(toDateTime(time)), action
                      ORDER BY day DESC '''

            likes_views_df = ph.read_clickhouse(query=query, connection=connection)
            likes_views_df.day = likes_views_df.day.dt.date
            return likes_views_df

    @task()
    def get_messages_df():
            
            """
            —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            """

            query = '''SELECT toStartOfDay(toDateTime(time)) AS day,
                           count(user_id) as messages
                    FROM simulator_20221120.message_actions
                    WHERE day > (today()-1) - 7 and day != today()
                    GROUP BY toStartOfDay(toDateTime(time))
                    ORDER BY day DESC'''
            messages_df = ph.read_clickhouse(query=query, connection=connection)
            # messages_df.day = likes_views_df.day.dt.date

            return messages_df
    @task()
    def get_info_likes_views_mess(likes_views_df, messages_df):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ –ª–∞–π–∫–∞—Ö, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            likes_views_df: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ª–∞–π–∫–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
            messages_df: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        """

        actions_df = likes_views_df.groupby(['day', 'action'], as_index=False)\
                    .agg({'actions':'sum'})\
                    .sort_values('day')
        actions_df['like_growth_rate'] = actions_df.query('action == "like"').actions.pct_change()
        actions_df['view_growth_rate'] = actions_df.query('action == "view"').actions.pct_change()

        likes = actions_df.query('day == @actions_df.day.max() and action == "like"').iloc[0][2]
        views = actions_df.query('day == @actions_df.day.max() and action == "view"').iloc[0][2]

        likes_growth = round(actions_df.query('day == @actions_df.day.max() and action == "like"').iloc[0][3] * 100, 2)
        views_growth = round(actions_df.query('day == @actions_df.day.max() and action == "view"').iloc[0][4] * 100, 2)

        ctr = round(likes/views, 4)*100

        title = "üíñüí¨<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>"

        text_1 = f'–ó–∞ –≤—á–µ—Ä–∞ –±—ã–ª–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {likes} –ª–∞–π–∫–æ–≤ ({likes_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é) –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {views} –ø–æ—Å—Ç–æ–≤ ({views_growth}% –∫ –ø—Ä–µ–¥. –¥–Ω—é). CTR —Å–æ—Å—Ç–∞–≤–∏–ª  {ctr}%'

        mes_1 = messages_df.sort_values('day', ascending=False).iloc[0][1]
        mes_0 = messages_df.sort_values('day', ascending=False).iloc[1][1]

        mes_diff = round(mes_1/mes_0 - 1, 2)*100

        text_2 = f'–¢–∞–∫–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {mes_1} —Å–æ–æ–±—â–µ–Ω–∏–π ({mes_diff}% –∫ –ø—Ä–µ–¥. –¥–Ω—é)'

        return title + '\n'+ '\n' + text_1 + '\n' + text_2
    
    @task()
    def send_plot_dau_df(dau_df):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ DAU
            dau_df: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """

        dau_df.day = pd.to_datetime(dau_df["day"])
        dau_df = dau_df.sort_values('day')
        dau_df.day = dau_df.day.dt.strftime('%d-%m')

        plt.subplot(212)
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ DAU')
        sns.lineplot(y = 'uniq_users', x='day', data=dau_df)
        plt.subplot(221)
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ DAU –≤ —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ OS')
        sns.lineplot(y = dau_df.uniq_users, x=dau_df.day, hue=dau_df.os)
        plt.subplot(222)
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ DAU –≤ —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ Source')
        sns.lineplot(y = dau_df.uniq_users, x=dau_df.day, hue=dau_df.source)

        plot_object = io.BytesIO()
        plt.savefig(plot_object)
        plot_object.seek(0)
        plot_object.name = 'dau.png'
        plt.close()
        bot.sendPhoto(chat_id=chat_id, photo=plot_object, parse_mode='HTML')
        
    @task()
    def send_plot_new_users_df(df_new_users):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            df_new_users: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        
        df_new_users.bd = pd.to_datetime(df_new_users.bd)
        df_new_users = df_new_users.sort_values('bd').query('bd > "1971-01-01"')
        df_new_users.bd = df_new_users.bd.dt.strftime('%d-%m')


        plt.subplot(212)
        plt.title('–¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        sns.lineplot(y = 'users', x='bd', data=df_new_users)
        plt.subplot(221)
        plt.title('–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ä–∞–∑—Ä–µ–∑–µ OS')
        sns.lineplot(y = 'users', x='bd', hue='os', data=df_new_users)
        plt.subplot(222)
        plt.title('–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ä–∞–∑—Ä–µ–∑–µ Source')
        sns.lineplot(y = 'users', x='bd', hue='source', data=df_new_users)

        plot_object = io.BytesIO()
        plt.savefig(plot_object)
        plot_object.seek(0)
        plot_object.name = 'dau.png'
        plt.close()
        bot.sendPhoto(chat_id=chat_id, photo=plot_object, parse_mode='HTML')
        
    @task()
    def send_plot_likes_views_df(likes_views_df, messages_df):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –ª–∞–π–∫–∞—Ö –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            likes_views_df: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ª–∞–π–∫–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
            messages_df: pandas.DataFrame
                –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        """

        likes_views_df.day = pd.to_datetime(likes_views_df["day"])
        likes_views_df = likes_views_df.sort_values('day')
        likes_views_df.day = likes_views_df.day.dt.strftime('%d-%m')

        messages_df.day = pd.to_datetime(messages_df["day"])
        messages_df = messages_df.sort_values('day')
        messages_df.day = messages_df.day.dt.strftime('%d-%m')

        ctr = likes_views_df.pivot_table(index='day', columns='action', values='actions').reset_index()
        ctr['ctr'] = ctr.like / ctr.view
        ctr['ctr'] = ctr.ctr.mul(100).round(2)

        plt.subplot(212)
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ CTR, %')
        sns.lineplot(y = 'ctr', x='day', data=ctr)
        plt.subplot(221)
        plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–µ–Ω—Ç–µ')
        sns.lineplot(y = 'actions', x='day', hue='action', data=likes_views_df)
        plt.subplot(222)
        plt.title('–ö–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
        sns.lineplot(y = 'messages', x='day', data=messages_df)

        plot_object = io.BytesIO()
        plt.savefig(plot_object)
        plot_object.seek(0)
        plot_object.name = 'dau.png'
        plt.close()
        bot.sendPhoto(chat_id=chat_id, photo=plot_object, parse_mode='HTML')
        
    @task()
    def send_message(title):

        """
        —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ 
            title: str
                —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        bot.sendMessage(chat_id=chat_id, text=title, parse_mode='HTML')
        
    @task()
    def send_message_title():

        """
        —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ 
        """
         
        context = get_current_context()
        ds = context['ds']
        bot.sendMessage(chat_id=chat_id, text=f"üìÑ<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π, –∏ –ø–æ —Å–µ—Ä–≤–∏—Å—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –î–∞—Ç–∞: {ds}</b>", parse_mode='HTML')
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞—Å–∫–æ–≤
    send_message_title()
    dau_df = get_dau_df_2()
    title_1 = get_dau_info(dau_df)
    send_message(title_1)
    send_plot_dau_df(dau_df)
    df_new_users = get_df_new_users()
    title_2 = get_info_new_users(df_new_users)
    send_message(title_2)
    send_plot_new_users_df(df_new_users)
    likes_views_df = get_likes_views_df()
    messages_df = get_messages_df()
    title_3 = get_info_likes_views_mess(likes_views_df, messages_df)
    send_message(title_3)
    send_plot_likes_views_df(likes_views_df, messages_df)
    
 # –∑–∞–ø—É—Å–∫–∞–µ–º dag   
lesson_7_dag_2_merinov = lesson_7_dag_2_merinov()